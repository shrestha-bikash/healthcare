{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["layout","labelCol","span","wrapperCol","URL","tailLayout","offset","App","useState","rawactivity","setRawActivity","console","log","className","name","initialValues","remember","onFinish","values","axios","post","then","res","data","onFinishFailed","errorInfo","Item","label","rules","required","message","Password","type","htmlType","onClick","get","bordered","dataSource","itemLayout","renderItem","item","time","symptoms","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAKMA,EAAS,CACbC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAGhBE,EAAM,8CAENC,EAAa,CACjBF,WAAY,CAAEG,OAAQ,EAAGJ,KAAM,KA6GlBK,MA1Gf,WAAgB,IAAD,EACyBC,mBAAS,MADlC,mBACNC,EADM,KACOC,EADP,KAsBb,OADAC,QAAQC,IAAI,eAAgBH,GAE1B,sBAAKI,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,SACE,eAAC,IAAD,2BACMb,GADN,IAEEc,KAAK,QACLC,cAAe,CAAEC,UAAU,GAC3BC,SA1BS,SAAAC,GACfP,QAAQC,IAAI,WAAYM,GACxBC,IAAMC,KAAKhB,EAAM,cAAec,GAAQG,MAAK,SAAAC,GAC3CX,QAAQC,IAAIU,EAAIC,UAwBZC,eApBe,SAAAC,GACrBd,QAAQC,IAAI,UAAWa,IAcnB,UAOE,cAAC,IAAKC,KAAN,CACEC,MAAM,OACNb,KAAK,OACLc,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAHrC,SAKE,cAAC,IAAD,MAGF,cAAC,IAAKJ,KAAN,CACEC,MAAM,QACNb,KAAK,QACLc,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,6BAHrC,SAKE,cAAC,IAAD,MAGF,cAAC,IAAKJ,KAAN,CACEC,MAAM,WACNb,KAAK,WACLc,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,gCAHrC,SAKE,cAAC,IAAMC,SAAP,MAEF,cAAC,IAAKL,KAAN,CACEC,MAAM,mBACNb,KAAK,cACLc,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,wCAHrC,SAKE,cAAC,IAAMC,SAAP,MAGF,cAAC,IAAKL,KAAN,2BAAerB,GAAf,aACE,cAAC,IAAD,CAAQ2B,KAAK,UAAUC,SAAS,SAAhC,8BAON,sBAAKpB,UAAU,eAAf,UACE,cAAC,IAAD,CAAQmB,KAAK,UAAUE,QA1DN,WACrBf,IAAMgB,IAAI/B,EAAM,eAAeiB,MAAK,SAAAC,GAClCX,QAAQC,IAAI,aAAcU,GAC1BX,QAAQC,IAAI,SAAUU,EAAIC,MAC1Bb,EAAeY,EAAIC,UAsDjB,8BAKEd,GACA,qBAAKI,UAAU,cAAf,SASE,cAAC,IAAD,CACEuB,UAAQ,EACRC,WAAY5B,EACZ6B,WAAW,WACXC,WAAY,SAAAC,GAAI,OACd,eAAC,IAAKd,KAAN,WACE,4BAAIc,EAAKC,OACT,4BAAID,EAAKE,0BClGZC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.feb7043e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { Form, Input, Button, List, Checkbox } from 'antd';\nimport axios from 'axios';\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\n\nconst URL = 'https://cs5500-healthcare.herokuapp.com/v1/'\n\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nfunction App() {\n  const [rawactivity, setRawActivity] = useState(null);\n\n  const onFinish = values => {\n    console.log('Success:', values);\n    axios.post(URL + 'user/signup', values).then(res => {\n      console.log(res.data)\n    })\n  };\n  \n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const getRawActivity = () => {\n    axios.get(URL + 'rawactivity').then(res => {\n      console.log('Response: ', res)\n      console.log('Data: ', res.data)\n      setRawActivity(res.data)\n    })\n  }\n  console.log('rawactivity:', rawactivity)\n  return (\n    <div className=\"App\">\n      <div className='signup-sec'>\n        <Form\n          {...layout}\n          name=\"basic\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label=\"Name\"\n            name=\"name\"\n            rules={[{ required: true, message: 'Please input your Full name!' }]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Email\"\n            name=\"email\"\n            rules={[{ required: true, message: 'Please input your email!' }]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Password\"\n            name=\"password\"\n            rules={[{ required: true, message: 'Please input your password!' }]}\n          >\n            <Input.Password />\n          </Form.Item>\n          <Form.Item\n            label=\"Confirm Password\"\n            name=\"re_password\"\n            rules={[{ required: true, message: 'Please reenter your password again!' }]}\n          >\n            <Input.Password />\n          </Form.Item>\n\n          <Form.Item {...tailLayout}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Sign Up\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n\n      <div className=\"activity-sec\">\n        <Button type=\"primary\" onClick={getRawActivity}>\n          Get Raw Activity\n        </Button>\n\n        {\n          rawactivity &&\n          <div className=\"rawactivity\">\n            {/* {\n              rawactivity.map((item, index) =>\n                <div key={index}>\n                  <p>{item.time}</p>\n                  <p>{item.symptoms}</p>\n                </div>\n              )\n            } */}\n            <List\n              bordered\n              dataSource={rawactivity}\n              itemLayout=\"vertical\"\n              renderItem={item => (\n                <List.Item>\n                  <p>{item.time}</p>\n                  <p>{item.symptoms}</p>\n                </List.Item>\n              )}\n            />\n          </div>\n        }\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}